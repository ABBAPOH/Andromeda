/*!
    \namespace HelloWorld

    \brief This namespace contains example of a Document-Editor architecture.

    \image html helloworld.png

    To create a new GuiSystem plugin, at least 4 classes should be implemented:
    document, editor, factory and plugin class.

    First, you need to implement document class. This class serves as a model
    for an editor. Here's a simple example of document that has no additional
    properties, but uses AbstractEditor::title property to contain text,
    displayed in an editor.

    \snippet helloworld.cpp 0

    This class has a constructor that setups default text and icon. Also it
    has trivial destructor. HelloWorldDocument class overrides
    AbstractDocument::setTitle function to make it public and implements
    AbstractDocument::openUrl function.

    Next step is to implement editor itself:

    \snippet helloworld.cpp 1

    Basically, each editor should have 2 constructors - first with no arguments
    (except parent) and second constructor with document as an argument. You
    can't create editor without a document, so first constructor should create
    default document. Don't forget to set document's parent in firts
    constructor, or document may leak:

    \snippet helloworld.cpp 2

    Also, editor should reimplement AbstractEditor::setDocument method and
    check type of a passed document (normally, each editor supports only
    documents of a specific type). You should update editor state in this
    method too (state is updated in setupDocument() function) and disconnect
    all signals from the old document:

    \snippet helloworld.cpp 3

    In an init() function we set default parameters for a label and put it into
    layout. Also we set label text and connect editor to the document
    in setupDocument() function:

    \snippet helloworld.cpp 4

    Let us add some useful functionality to our editor - we will allow user
    to change label's text. To do this, we reimplement contextMenuEvent method
    and add slot that shows QInputDialog for a user so he could type a new
    text:

    \snippet helloworld.cpp 5

    Factory implementation is quite simple - you should reimplement at least 5
    methods: id, name, icon, createDocument and createEditor.

    \snippet helloworld.cpp 6

    Plugin implementation is simple too - plugin has trivial constructor and
    destructor. The only method it implements is an initialize() function -
    plugin creates HelloWorldEditorFactory and registers in
    GuiSystem::EditorManager.

    \snippet helloworld.cpp 7

    That's all. Plugin will be loaded automatically if placed into the
    correct location ("plugins/andromeda"). HelloWorldEditor can be opened by
    typing "andromeda://helloworld" in the address bar.
*/
